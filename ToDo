# general

- find a nice acronym for 'round'
- interface between the algorithm and the predicate
- expected number of messages for a round: inferred from the send function
- locally testable safety/liveness conditions: of the form ∀ p. QF-φ(p)
- split the sources into multiple parts/sub-projects
  * cleaner separation between the runtime and the declarations
  * so we can use macros for the testing and debugging in the main project
- find a way to get a generic consensus algorithm:
  currently we have problem with anonym class (new Process ...)
  "Parameter type in structural refinement may not refer to an abstract type defined outside that refinement"
  need to either find a way of processing Process differently or encapsulate instance variables differently
  it is possible to add the type parameter when rewriting the class ?
- can we squeeze pre/post conditions into annotations and get that into the method signature ??


# implementation

- ghost variables: make sure they are only read in the verification part and removed at compile time
- test with message drop (reliability)
- test with more processes (scalability)
- predicate: buffer message while one thread delivers
- change the (de)serialization:
    * our own stuff for primitive types, pickling for the rest
    * get rid of Message.scala (generate extraction primitives in process)
- accessing members of outer class inside an inner class
    * check if fixed in 2.11.2 (with the right untypcheck) or report macro bug about it

# verification

- add temporal elements to spec/formula
- better structure of the specification: which invariant we can use to prove what property.
- extraction of initial state: if a variable is not initialized in the process, take the default value in the declaration
- extraction of transition relation:
    * ...
- decision procedure
- smtlib:
    * dump smt files

# example

- find an application of LatticeAgreement
- implement multi-Paxos, equalitarian paxos
- specialize the OTR to avoid the "1st message → initial value"
- a version of last voting that terminates
- with dynamic group membership
- with recovery


# network emulation: packet loss, delay, ...

- http://www.linuxfoundation.org/collaborate/workgroups/networking/netem
- https://gist.github.com/trongthanh/1196596
- http://www.cs.virginia.edu/~sdb7e/os_project/assignment.html

# bugs

```
Aug 01, 2014 2:03:30 PM io.netty.util.HashedWheelTimer$HashedWheelTimeout expire
WARNING: An exception was thrown by TimerTask.
java.lang.ArrayIndexOutOfBoundsException: -1
    at example.OTR2$$anon$1.currentRound(Otr2.scala:46)
    at round.Process.update(Process.scala:33)
    at round.predicate.Predicate.deliver(Predicate.scala:82)
    at round.predicate.ToPredicate$$anon$1.run(ToPredicate.scala:72)
    at io.netty.util.HashedWheelTimer$HashedWheelTimeout.expire(HashedWheelTimer.java:568)
    at io.netty.util.HashedWheelTimer$HashedWheelBucket.expireTimeouts(HashedWheelTimer.java:644)
    at io.netty.util.HashedWheelTimer$Worker.run(HashedWheelTimer.java:365)
    at java.lang.Thread.run(Thread.java:744)
```

there is race when stopping the runtime and the instance terminates "naturally"
this is not bad as the thread throwing the expection is part of the group that will be shutdown.
```
java.lang.RuntimeException: dispatcher.remove: instance not found
    at scala.sys.package$.error(package.scala:27)
    at round.runtime.InstanceDispatcher.remove(InstanceDispatcher.scala:79)
    at round.predicate.Predicate.stop(Predicate.scala:93)
    at round.predicate.ToPredicate.stop(ToPredicate.scala:120)
    at round.predicate.Predicate.deliver(Predicate.scala:80)
    at round.predicate.ToPredicate.receive(ToPredicate.scala:168)
    at round.predicate.Predicate.messageReceived(Predicate.scala:128)
    at round.runtime.InstanceDispatcher.channelRead0(InstanceDispatcher.scala:100)
    at round.runtime.InstanceDispatcher.channelRead0(InstanceDispatcher.scala:14)
    at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:105)
    at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:333)
    at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:319)
    at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:787)
    at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:92)
    at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:511)
    at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:468)
    at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:382)
    at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:354)
    at io.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:116)
    at io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator.run(DefaultThreadFactory.java:137)
    at java.lang.Thread.run(Thread.java:745)
```
