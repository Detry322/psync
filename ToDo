# general

- find a nice acronym for 'round'
- interface between the algorithm and the predicate
- expected number of messages for a round: inferred from the send function
- locally testable safety/liveness conditions: of the form ∀ p. QF-φ(p)
- split the sources into multiple parts/sub-projects
  * cleaner separation between the runtime and the declarations
  * so we can use macros for the testing and debugging in the main project
  * smtlib as its own project
- integrate recovery


# implementation

- ghost variables: make sure they are only read in the verification part and removed at compile time
- test with message drop (reliability)
- test with more processes (scalability)
- predicate: buffer message while one thread delivers
- change the (de)serialization:
    * our own stuff for primitive types, pickling for the rest
    * get rid of Message.scala (generate extraction primitives in process)
- accessing members of outer class inside an inner class
    * check if fixed in 2.11.2 (with the right untypcheck) or report macro bug about it
- graceful stop
- adaptative timeout (timeout too often → increment the bound)

# verification

- add temporal elements to spec/formula
- better structure of the specification: which invariant we can use to prove what property.
- extraction of transition relation:
    * ...
- decision procedure
- smtlib:
    * dump smt files

# example

- find an application of LatticeAgreement
- implement multi-Paxos, equalitarian paxos
- specialize the OTR to avoid the "1st message → initial value"
- a version of last voting that terminates
- with dynamic group membership
- with recovery


# network emulation: packet loss, delay, ...

- http://www.linuxfoundation.org/collaborate/workgroups/networking/netem
- https://gist.github.com/trongthanh/1196596
- http://www.cs.virginia.edu/~sdb7e/os_project/assignment.html

# bugs

```
Aug 01, 2014 2:03:30 PM io.netty.util.HashedWheelTimer$HashedWheelTimeout expire
WARNING: An exception was thrown by TimerTask.
java.lang.ArrayIndexOutOfBoundsException: -1
    at example.OTR2$$anon$1.currentRound(Otr2.scala:46)
    at round.Process.update(Process.scala:33)
    at round.predicate.Predicate.deliver(Predicate.scala:82)
    at round.predicate.ToPredicate$$anon$1.run(ToPredicate.scala:72)
    at io.netty.util.HashedWheelTimer$HashedWheelTimeout.expire(HashedWheelTimer.java:568)
    at io.netty.util.HashedWheelTimer$HashedWheelBucket.expireTimeouts(HashedWheelTimer.java:644)
    at io.netty.util.HashedWheelTimer$Worker.run(HashedWheelTimer.java:365)
    at java.lang.Thread.run(Thread.java:744)
```

```
Exception in thread "main"
Exception in thread "main"
java.lang.RuntimeException: cannot run more than one instance with the same ID: 4
java.lang.RuntimeException: cannot run more than one instance with the same ID: 4
    at scala.sys.package$.error(package.scala:27)   at scala.sys.package$.error(package.scala:27)
    at round.runtime.InstanceDispatcher.add(InstanceDispatcher.scala:57)    at round.runtime.InstanceDispatcher.add(InstanceDispatcher.scala:57)
    at round.predicate.Predicate.start(Predicate.scala:65)  at round.predicate.Predicate.start(Predicate.scala:65)
    at round.runtime.RunTime.startInstance(RunTime.scala:32)    at round.runtime.RunTime.startInstance(RunTime.scala:32)
    at example.PerfTest$.main(PerfTest.scala:65)    at example.PerfTest$.main(PerfTest.scala:65)
    at example.PerfTest.main(PerfTest.scala)    at example.PerfTest.main(PerfTest.scala)
```

```
SEVERE: LEAK: ByteBuf.release() was not called before it's garbage-collected. Enable advanced leak reporting to find out where the leak occurred. To enable advanced leak reporting, specify the JVM option '-Dio.netty.leakDetectionLevel=advanced' or call ResourceLeakDetector.setLevel()
```

```
Exception in thread "main" java.lang.IndexOutOfBoundsException: readerIndex: 20 (expected: 0 <= readerIndex <= writerIndex(12))
    at io.netty.buffer.AbstractByteBuf.readerIndex(AbstractByteBuf.java:73)
    at example.OTR2$$anon$1$$anon$2.deserialize(Otr2.scala:54)
    at example.OTR2$$anon$1$$anon$2.deserialize(Otr2.scala:54)
    at round.Round.round$Round$$decode$1(Round.scala:62)
    at round.Round$$anonfun$1.apply(Round.scala:66)
    at round.Round$$anonfun$1.apply(Round.scala:66)
    at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:245)
    at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:245)
    at scala.collection.immutable.Set$Set4.foreach(Set.scala:179)
    at scala.collection.TraversableLike$class.map(TraversableLike.scala:245)
    at scala.collection.AbstractSet.scala$collection$SetLike$$super$map(Set.scala:47)
    at scala.collection.SetLike$class.map(SetLike.scala:93)
    at scala.collection.AbstractSet.map(Set.scala:47)
    at round.Round.unpackUpdate(Round.scala:66)
    at round.Process.update(Process.scala:33)
    at round.predicate.Predicate.deliver(Predicate.scala:82)
    at round.predicate.ToPredicate.afterSend(ToPredicate.scala:107)
    at round.predicate.Predicate.send(Predicate.scala:122)
    at round.runtime.RunTime.startInstance(RunTime.scala:34)
    at example.PerfTest$.main(PerfTest.scala:65)
    at example.PerfTest.main(PerfTest.scala)
```

graceful shutdown:
```
Exception in thread "main" java.lang.NullPointerException
    at round.predicate.Predicate$$anonfun$send$2.apply(Predicate.scala:117)
    at round.predicate.Predicate$$anonfun$send$2.apply(Predicate.scala:113)
    at scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)
    at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:48)
    at round.predicate.Predicate.send(Predicate.scala:113)
```
                   
