package round

import io.netty.buffer.ByteBuf
import io.netty.buffer.ByteBufAllocator

import scala.pickling._
import binary._

//TODO not so nice (exn for control flow) but it will do for the moment
class TerminateInstance extends Exception() { }


abstract class Round {

  type A

  def send(): Set[(A, ProcessID)]

  def update(mailbox: Set[(A, ProcessID)]): Unit

  protected final def broadcast(msg: A): Set[(A, ProcessID)] = {
    group.replicas.foldLeft(Set.empty[(A,ProcessID)])( (acc, r) => acc + (msg -> r.id))
  }
  
  //to finish the instance
  //TODO throwing so many exception might be expensive for normal control flow...
  protected final def terminate(): Nothing = {
    throw new TerminateInstance
  }

  
  private var _continue = true
  protected final def exitAtEndOfRound(): Unit = {
    _continue = false
  }

  //TODO can we inter that from the send code ?
  def expectedNbrMessages: Int = group.size

  //////////////////
  // util methods //
  //////////////////

  //TODO because of bug in macros (should be in Process)
  var id = new ProcessID(0)

  //TODO a better way to hide/abstract the group
  private var group: round.runtime.Group = null
  def setGroup(g: round.runtime.Group) {
    group = g
    id = g.self
  }

  private var packetSize = -1
  
  def setOptions(options: runtime.RuntimeOptions) {
    packetSize = options.packetSize
  }
  
  //serialization is generated by macros

  protected def serialize(payload: A, out: ByteBuf): Unit

  protected def deserialize(in: ByteBuf): A

  final def packSend(alloc: ByteBufAllocator): Set[(ProcessID, ByteBuf)] = {
    val msgs = send()
    //println("sending: " + msgs.mkString(", "))
    msgs.map{ case (value, dst) =>
      val buf = if (packetSize >= 8) alloc.buffer(packetSize) else alloc.buffer()
      serialize(value, buf)
      (dst, buf)
    }
  }

  final def unpackUpdate(msg: Set[(ProcessID, ByteBuf)]): Boolean = {
    def decode(p: (ProcessID, ByteBuf)): (A, ProcessID) = {
      val p1 = p._2
      val a = deserialize(p1)
      p1.release
      (a, p._1)
    }
    val decoded = msg.map(decode)
    //println("received: " + decoded.mkString(", "))
    _continue = true
    update(decoded)
    _continue
  }


  //////////////////////
  // for verification //
  //////////////////////

  import verification._

  //macros will take care of populating those fields
  val auxSpec: Map[String, AuxiliaryMethod] 
  val rawTR: RoundTransitionRelation
  val sendStr: String
  val updtStr: String

}



