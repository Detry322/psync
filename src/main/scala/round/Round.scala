package round

import io.netty.buffer.ByteBuf
import io.netty.buffer.ByteBufAllocator
import round.formula._

import scala.pickling._
import binary._

//TODO not so nice (exn for control flow) but it will do for the moment
class TerminateInstance extends Exception() { }


abstract class Round[A] extends RtRound {

  def send(): Map[ProcessID,A]

  def update(mailbox: Map[ProcessID,A]): Unit

  private var _continue = true
  protected final def exitAtEndOfRound(): Unit = {
    _continue = false
  }
  
  //serialization is generated by macros
  protected def serialize(payload: A, out: ByteBuf): Unit
  protected def deserialize(in: ByteBuf): A

  //////////////////
  // util methods //
  //////////////////

  private var packetSize = -1
  
  override def setOptions(options: runtime.RuntimeOptions) {
    packetSize = options.packetSize
  }
  
  final def packSend(alloc: ByteBufAllocator): Map[ProcessID, ByteBuf] = {
    val msgs = send()
    //println("sending: " + msgs.mkString(", "))
    msgs.map{ case (dst, value) =>
      val buf = if (packetSize >= 8) alloc.buffer(packetSize) else alloc.buffer()
      serialize(value, buf)
      (dst, buf)
    }
  }

  final def unpackUpdate(msg: Map[ProcessID, ByteBuf]): Boolean = {
    def decode(p: (ProcessID, ByteBuf)): (ProcessID, A) = {
      val p1 = p._2
      val a = deserialize(p1)
      p1.release
      (p._1, a)
    }
    val decoded = msg.map(decode)
    //println("received: " + decoded.mkString(", "))
    _continue = true
    update(decoded)
    _continue
  }

}

abstract class RtRound {
  
  protected final def broadcast[A](msg: A): Map[ProcessID,A] = {
    group.replicas.foldLeft(Map.empty[ProcessID,A])( (acc, r) => acc + (r.id -> msg) )
  }
  
  def packSend(alloc: ByteBufAllocator): Map[ProcessID, ByteBuf]
  def unpackUpdate(msg: Map[ProcessID, ByteBuf]): Boolean
  
  //TODO a better way to hide/abstract the group
  private var group: round.runtime.Group = null
  def setGroup(g: round.runtime.Group) {
    group = g
  }

  //TODO can we inter that from the send code ?
  def expectedNbrMessages: Int = group.size

  def setOptions(options: runtime.RuntimeOptions): Unit

  //to finish the instance
  //TODO throwing so many exception might be expensive for normal control flow...
  protected final def terminate(): Nothing = {
    throw new TerminateInstance
  }

  //////////////////////
  // for verification //
  //////////////////////

  import verification._

  //macros will take care of overriding those methods
  def auxSpec: Map[String, AuxiliaryMethod] = Map.empty
  def rawTR: RoundTransitionRelation = new RoundTransitionRelation(
    True(), Variable("s"), True(), Variable("u"), Nil, Nil, Nil )
  def sendStr: String = ""
  def updtStr: String = ""

}
