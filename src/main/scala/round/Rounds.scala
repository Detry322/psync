package round

import Algorithm._

import io.netty.buffer.ByteBuf

import scala.pickling._
import binary._

//TODO not so nice (exn for control flow) but it will do for the moment
class TerminateInstance extends Exception() { }


abstract class Round {

  type A

  def send(): Set[(A, ProcessID)]

  def update(mailbox: Set[(A, ProcessID)]): Unit

  protected final def broadcast(msg: A): Set[(A, ProcessID)] = {
    group.replicas.foldLeft(Set.empty[(A,ProcessID)])( (acc, r) => acc + (msg -> r.id))
  }
  
  //to finish the instance
  protected final def terminate(): Nothing = {
    throw new TerminateInstance
  }


  //////////////////
  // util methods //
  //////////////////

  private var group: round.runtime.Group = null
  def setGroup(g: round.runtime.Group) { group = g }

  //serialization is generated by macros

  protected def serialize(payload: A, out: ByteBuf, withLength: Boolean = true, offset: Int = 8): Int

  protected def deserialize(in: ByteBuf, withLength: Boolean = true, offset: Int = 8): A

  final def packSend: Set[(ByteBuf, ProcessID)] = {
    send().map{ case (value, dst) =>
      val buf = utils.ByteBufAllocator.buffer()
      serialize(value, buf)
      (buf, dst)
    }
  }

  final def unpackUpdate(msg: Set[(ByteBuf,ProcessID)]) = {
    def decode(p: (ByteBuf,ProcessID)): (A, ProcessID) = {
      val p1 = p._1
      val a = deserialize(p1)
      p1.release
      (a, p._2)
    }
    val decoded = msg.map(decode)
    update(decoded)
  }


  //////////////////////
  // for verification //
  //////////////////////

  import verification._

  //macros will take care of populating those fields
  val auxSpec: Map[String, AuxiliaryMethod] 
  val rawTR: RoundTransitionRelation
  val sendStr: String
  val updtStr: String

}



